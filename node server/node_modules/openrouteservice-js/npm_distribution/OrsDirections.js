'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _superagent = require('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _OrsUtil = require('./OrsUtil');

var _OrsUtil2 = _interopRequireDefault(_OrsUtil);

var _constants = require('./constants');

var _constants2 = _interopRequireDefault(_constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var orsUtil = new _OrsUtil2.default();

var OrsDirections = function () {
  function OrsDirections(args) {
    _classCallCheck(this, OrsDirections);

    this.requestSettings = null;
    this.args = {};
    this.meta = null;
    if (_constants2.default.propNames.apiKey in args) {
      this.args[_constants2.default.propNames.apiKey] = args[_constants2.default.propNames.apiKey];
    } else {
      // eslint-disable-next-line no-console
      console.error(_constants2.default.missingAPIKeyMsg);
    }

    if (_constants2.default.propNames.host in args) {
      this.args[_constants2.default.propNames.host] = args[_constants2.default.propNames.host];
    }
    if (_constants2.default.propNames.service in args) {
      this.args[_constants2.default.propNames.service] = args[_constants2.default.propNames.service];
    }
  }

  _createClass(OrsDirections, [{
    key: 'clear',
    value: function clear() {
      for (var variable in this.args) {
        if (variable !== _constants2.default.apiKeyPropName) delete this.args[variable];
      }
    }
  }, {
    key: 'clearPoints',
    value: function clearPoints() {
      if ('coordinates' in this.args) this.args.coordinates.length = 0;
    }
  }, {
    key: 'addWaypoint',
    value: function addWaypoint(latlon) {
      if (!('coordinates' in this.args)) {
        this.args.coordinates = [];
      }
      this.args.coordinates.push(latlon);
    }
  }, {
    key: 'getBody',
    value: function getBody(args) {
      if (args.options && _typeof(args.options) !== 'object') {
        args.options = JSON.parse(args.options);
      }
      var options = {};

      if (this.meta.profile == 'driving-hgv') {
        options.vehicle_type = 'hgv';
      }

      if (args.restrictions) {
        options.profile_params = {
          restrictions: _extends({}, args.restrictions)
        };
        delete args.restrictions;
      }

      if (args.avoidables) {
        options.avoid_features = [].concat(_toConsumableArray(args.avoidables));
        delete args.avoidables;
      }

      if (args.avoid_polygons) {
        options.avoid_polygons = _extends({}, args.avoid_polygons);
        delete args.avoid_polygons;
      }

      if (Object.keys(options).length > 0) {
        return _extends({}, args, { options: options });
      } else {
        return _extends({}, args);
      }
    }
  }, {
    key: 'calculate',
    value: function calculate(reqArgs) {
      orsUtil.setRequestDefaults(this.args, reqArgs, true);
      if (!this.args[_constants2.default.propNames.service]) {
        this.args[_constants2.default.propNames.service] = 'directions';
      }
      orsUtil.copyProperties(reqArgs, this.args);

      var that = this;
      return new _bluebird2.default(function (resolve, reject) {
        var timeout = 10000;
        // meta should be generated once that subsequent requests work
        if (that.meta == null) {
          that.meta = orsUtil.prepareMeta(that.args);
        }
        that.httpArgs = orsUtil.prepareRequest(that.args);
        var url = orsUtil.prepareUrl(that.meta);

        var postBody = that.getBody(that.httpArgs);
        var authorization = that.meta[_constants2.default.propNames.apiKey];
        _superagent2.default.post(url).send(postBody).set('Authorization', authorization)
        //.accept(that.meta.mimeType)
        .timeout(timeout).end(function (err, res) {
          if (err || !res.ok) {
            reject(err);
          } else if (res) {
            resolve(res.body || res.text);
          }
        });
      });
    }
  }]);

  return OrsDirections;
}();

exports.default = OrsDirections;